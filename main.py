import os
import discord
import keep_alive
import re
import datetime
import json
from discord.ext import commands


intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True
intents.presences = True


bot = commands.Bot(command_prefix='!', intents=intents)


created_channels = {}

# ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å—Å—ã–ª–∫–∏
LINKS_FILTER_CHANNEL_ID = '1359604943228633399'  

# ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤
TICKET_CHANNEL_ID = None  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
TICKET_LOGS_CHANNEL_ID = None  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞–º–∏
TICKET_ROLE_ID = None  # ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
active_tickets = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–∫–µ—Ç–æ–≤
def save_ticket_config():
    config = {
        "ticket_channel": TICKET_CHANNEL_ID,
        "logs_channel": TICKET_LOGS_CHANNEL_ID,
        "role_id": TICKET_ROLE_ID
    }
    
    try:
        with open("ticket_config.json", "w") as f:
            json.dump(config, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∏–∫–µ—Ç–æ–≤
def load_ticket_config():
    global TICKET_CHANNEL_ID, TICKET_LOGS_CHANNEL_ID, TICKET_ROLE_ID
    
    try:
        if os.path.exists("ticket_config.json"):
            with open("ticket_config.json", "r") as f:
                config = json.load(f)
                
                TICKET_CHANNEL_ID = config.get("ticket_channel")
                TICKET_LOGS_CHANNEL_ID = config.get("logs_channel")
                TICKET_ROLE_ID = config.get("role_id")
                
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–∫–µ—Ç–æ–≤: –∫–∞–Ω–∞–ª –∑–∞—è–≤–æ–∫: {TICKET_CHANNEL_ID}, –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {TICKET_LOGS_CHANNEL_ID}, —Ä–æ–ª—å: {TICKET_ROLE_ID}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}")

URL_PATTERN = re.compile(r'https?://\S+|www\.\S+')
DISCORD_INVITE_PATTERN = re.compile(r'discord(?:\.gg|app\.com/invite|\.com/invite)/\S+')

@bot.event
async def on_message(message):
    
    if message.author.bot or str(message.channel.id) != LINKS_FILTER_CHANNEL_ID:
        
        await bot.process_commands(message)
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    has_url = URL_PATTERN.search(message.content)
    has_discord_invite = DISCORD_INVITE_PATTERN.search(message.content)
    
    if has_url or has_discord_invite:
        
        await message.delete()
        await message.channel.send(
            f"{message.author.mention}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!",
            delete_after=5  
        )
    else:
        
        await bot.process_commands(message)

@bot.event
async def on_ready():
    """–°–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∏–∫–µ—Ç–æ–≤
    load_ticket_config()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.add_view(TicketButtonView())
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    for user_id, ticket_data in active_tickets.items():
        bot.add_view(TicketActionView(user_id))
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å Discord
    try:
        synced = await bot.tree.sync()
        print(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}')


@bot.event
async def on_voice_state_update(member, before, after):
    """–°–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
   
    TRIGGER_CHANNEL_ID = '1359605706289844445'  

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –∫–∞–Ω–∞–ª-—Ç—Ä–∏–≥–≥–µ—Ä
    if after.channel and str(after.channel.id) == TRIGGER_CHANNEL_ID:
        guild = member.guild

        
        channel = await guild.create_voice_channel(
            name=f'üîä {member.display_name}\'s –∫–∞–Ω–∞–ª',
            category=after.channel.category,
            overwrites={
                guild.default_role:
                discord.PermissionOverwrite(view_channel=False),
                member:
                discord.PermissionOverwrite(view_channel=True,
                                            connect=True,
                                            speak=True,
                                            stream=True,
                                            use_voice_activation=True,
                                            move_members=True,
                                            manage_channels=True)
            })

        
        await member.move_to(channel)

        
        created_channels[channel.id] = {'owner': member.id, 'channel': channel}

        
        view = PrivateChannelView(channel.id)

        
        message = await channel.send('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º:', view=view)

        
        created_channels[channel.id]['message_id'] = message.id

    
    if before.channel and before.channel.id in created_channels:
        channel_data = created_channels[before.channel.id]
        channel = channel_data['channel']

       
        if len(channel.members) == 0:
            await channel.delete()
            del created_channels[before.channel.id]



class PrivateChannelView(discord.ui.View):

    def __init__(self, channel_id):
        super().__init__(timeout=None)
        self.channel_id = channel_id

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
        self.add_item(LockChannelButton())
        self.add_item(UnlockChannelButton())
        self.add_item(LimitButton())
        self.add_item(DeleteButton())
        self.add_item(RenameSelect())
        self.add_item(MemberActionSelect())



class LockChannelButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.secondary,
                         label='–ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª',
                         custom_id='lock_channel')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.set_permissions(interaction.guild.default_role,
                                      view_channel=True,
                                      connect=False)
        await interaction.response.send_message(
            '–ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç! –¢–µ–ø–µ—Ä—å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –≤ –Ω–µ–≥–æ –≤–æ–π—Ç–∏.',
            ephemeral=True)


class UnlockChannelButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.success,
                         label='–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª',
                         custom_id='unlock_channel')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.set_permissions(interaction.guild.default_role,
                                      view_channel=True,
                                      connect=True)
        await interaction.response.send_message(
            '–ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç! –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏.', ephemeral=True)


class LimitButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.primary,
                         label='–õ–∏–º–∏—Ç',
                         custom_id='limit')

    async def callback(self, interaction: discord.Interaction):
        try:
            channel_id = self.view.channel_id

            if channel_id not in created_channels:
                return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                               ephemeral=True)

            channel_data = created_channels[channel_id]

            if interaction.user.id != channel_data['owner']:
                return await interaction.response.send_message(
                    '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
            modal = LimitModal(self.view.channel_id)
            await interaction.response.send_modal(modal)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")
            try:
                await interaction.response.send_message(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    ephemeral=True)
            except:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º followup
                await interaction.followup.send(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    ephemeral=True)


class DeleteButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.danger,
                         label='–£–¥–∞–ª–∏—Ç—å',
                         custom_id='delete')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.delete()
        del created_channels[channel_id]


# –í—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
class RenameSelect(discord.ui.Select):

    def __init__(self):
        options = [
            discord.SelectOption(label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ',
                                 value='default',
                                 description='–í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
            discord.SelectOption(label='–ò–≥—Ä–æ–≤–æ–π',
                                 value='gaming',
                                 description='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä'),
            discord.SelectOption(label='–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π',
                                 value='music',
                                 description='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º—É–∑—ã–∫–∏'),
            discord.SelectOption(label='–°–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                 value='custom',
                                 description='–ó–∞–¥–∞—Ç—å —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª—É')
        ]
        super().__init__(placeholder='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                         min_values=1,
                         max_values=1,
                         options=options,
                         custom_id='rename')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        new_name_type = self.values[0]

        if new_name_type == 'custom':
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            modal = CustomNameModal(self.view.channel_id)
            await interaction.response.send_modal(modal)
        else:
            channel_name = ''
            if new_name_type == 'default':
                channel_name = f'üîä {interaction.user.display_name}\'s –∫–∞–Ω–∞–ª'
            elif new_name_type == 'gaming':
                channel_name = f'üéÆ {interaction.user.display_name}\'s –∏–≥—Ä–æ–≤–æ–π'
            elif new_name_type == 'music':
                channel_name = f'üéµ {interaction.user.display_name}\'s –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π'

            await channel.edit(name=channel_name)
            await interaction.response.send_message(
                f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{channel_name}"!',
                ephemeral=True)


class MemberActionSelect(discord.ui.Select):

    def __init__(self):
        options = [
            discord.SelectOption(label='–ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞',
                                 value='kick',
                                 description='–í—ã–≥–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞'),
            discord.SelectOption(label='–ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞',
                                 value='ban',
                                 description='–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É –≤—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª')
        ]
        super().__init__(placeholder='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
                         min_values=1,
                         max_values=1,
                         options=options,
                         custom_id='member_action')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        action = self.values[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        members = [m for m in channel.members if m.id != channel_data['owner']]

        if not members:
            return await interaction.response.send_message(
                '–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!', ephemeral=True)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        view = discord.ui.View()
        select = MemberSelect(members, action, channel_id)
        view.add_item(select)

        await interaction.response.send_message(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è ' +
            ('–∫–∏–∫–∞:' if action == 'kick' else '–±–∞–Ω–∞:'),
            view=view,
            ephemeral=True)


class MemberSelect(discord.ui.Select):

    def __init__(self, members, action, channel_id):
        self.action = action
        self.channel_id = channel_id

        options = []
        for member in members:
            options.append(
                discord.SelectOption(label=member.display_name,
                                     value=f"{action}_{member.id}",
                                     description=str(member)))

        super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
                         min_values=1,
                         max_values=1,
                         options=options,
                         custom_id='member_select')

    async def callback(self, interaction: discord.Interaction):
        if self.channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[self.channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        action, user_id = self.values[0].split('_')
        member = interaction.guild.get_member(int(user_id))

        if not member:
            return await interaction.response.send_message(
                '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!', ephemeral=True)

        if action == 'kick':
            if member.voice and member.voice.channel and member.voice.channel.id == channel.id:
                await member.move_to(None)
            await interaction.response.send_message(
                f'{member.display_name} –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞!', ephemeral=True)
        elif action == 'ban':
            await channel.set_permissions(member,
                                          view_channel=False,
                                          connect=False)
            if member.voice and member.voice.channel and member.voice.channel.id == channel.id:
                await member.move_to(None)
            await interaction.response.send_message(
                f'{member.display_name} –∑–∞–±–∞–Ω–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!', ephemeral=True)


# –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
class CustomNameModal(discord.ui.Modal, title='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'):

    def __init__(self, channel_id):
        super().__init__()
        self.channel_id = channel_id

    channel_name = discord.ui.TextInput(
        label='–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
        placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞',
        min_length=1,
        max_length=30,
        required=True)

    async def on_submit(self, interaction: discord.Interaction):
        if self.channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[self.channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.edit(name=self.channel_name.value)
        await interaction.response.send_message(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{self.channel_name.value}"!',
            ephemeral=True)


class LimitModal(discord.ui.Modal, title='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'):

    def __init__(self, channel_id):
        super().__init__()
        self.channel_id = channel_id

    limit = discord.ui.TextInput(label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                                 placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99',
                                 min_length=1,
                                 max_length=2,
                                 required=True)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if self.channel_id not in created_channels:
                return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                               ephemeral=True)

            channel_data = created_channels[self.channel_id]

            if interaction.user.id != channel_data['owner']:
                return await interaction.response.send_message(
                    '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

            channel = channel_data['channel']

            try:
                limit = int(self.limit.value)
                if limit < 1 or limit > 99:
                    return await interaction.response.send_message(
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99!', ephemeral=True)

                await channel.edit(user_limit=limit)
                await interaction.response.send_message(
                    f'–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}', ephemeral=True)
            except ValueError:
                await interaction.response.send_message(
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99!', ephemeral=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞: {e}")
            await interaction.response.send_message(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral=True)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤
@bot.tree.command(name="setup_ticket", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
async def setup_ticket(interaction: discord.Interaction, ticket_channel: discord.TextChannel, logs_channel: discord.TextChannel, role: discord.Role):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    
    global TICKET_CHANNEL_ID, TICKET_LOGS_CHANNEL_ID, TICKET_ROLE_ID
    
    TICKET_CHANNEL_ID = str(ticket_channel.id)
    TICKET_LOGS_CHANNEL_ID = str(logs_channel.id)
    TICKET_ROLE_ID = str(role.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    save_ticket_config()
    
    await interaction.response.send_message(f"–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫: {ticket_channel.mention}\n–ö–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {logs_channel.mention}\n–†–æ–ª—å –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏: {role.mention}", ephemeral=True)


@bot.tree.command(name="send_ticket_button", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
async def send_ticket_button(interaction: discord.Interaction, channel: discord.TextChannel = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    
    global TICKET_CHANNEL_ID
    
    # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    if not channel:
        channel = interaction.channel
    
    # –û–±–Ω–æ–≤–ª—è–µ–º TICKET_CHANNEL_ID
    TICKET_CHANNEL_ID = str(channel.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    save_ticket_config()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    view = TicketButtonView()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
    embed = discord.Embed(
        title="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.",
        color=discord.Color.blue()
    )
    
    await channel.send(embed=embed, view=view)
    
    await interaction.response.send_message(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.mention}!", ephemeral=True)


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
class TicketButtonView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @discord.ui.button(label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.primary, custom_id="create_ticket")
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        await interaction.response.send_modal(TicketModal())


# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class TicketModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
    username = discord.ui.TextInput(
        label="–ù–∏–∫",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫",
        required=True
    )
    
    age = discord.ui.TextInput(
        label="–í–æ–∑—Ä–∞—Å—Ç",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
        required=True
    )
    
    experience = discord.ui.TextInput(
        label="–û–ø—ã—Ç –∏–≥—Ä—ã",
        placeholder="–ò–≥—Ä–∞–ª–∏ –≤—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏–ª–∏ –Ω–µ—Ç?",
        style=discord.TextStyle.paragraph,
        required=True
    )
    
    adequacy = discord.ui.TextInput(
        label="–ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å",
        placeholder="–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10",
        required=True
    )
    
    plans = discord.ui.TextInput(
        label="–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        placeholder="–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ?",
        style=discord.TextStyle.paragraph,
        required=True
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        global active_tickets, TICKET_LOGS_CHANNEL_ID
        
        if not TICKET_LOGS_CHANNEL_ID:
            return await interaction.response.send_message("–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
        logs_channel = interaction.guild.get_channel(int(TICKET_LOGS_CHANNEL_ID))
        if not logs_channel:
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ
        embed = discord.Embed(
            title=f"üìù –ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.display_name}",
            description=f"**–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:** {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}",
            color=discord.Color.gold()
        )
        
        embed.add_field(name="–ù–∏–∫", value=self.username.value, inline=True)
        embed.add_field(name="–í–æ–∑—Ä–∞—Å—Ç", value=self.age.value, inline=True)
        embed.add_field(name="–ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å", value=self.adequacy.value, inline=True)
        embed.add_field(name="–û–ø—ã—Ç –∏–≥—Ä—ã", value=self.experience.value, inline=False)
        embed.add_field(name="–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", value=self.plans.value, inline=False)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        await interaction.response.send_message("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", view=AdditionalQuestionsView(), ephemeral=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∑–∞—è–≤–∫–∏
        active_tickets[interaction.user.id] = {
            "user": interaction.user,
            "embed": embed,
            "ticket_data": {
                "username": self.username.value,
                "age": self.age.value,
                "experience": self.experience.value,
                "adequacy": self.adequacy.value,
                "plans": self.plans.value
            }
        }


# –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
class AdditionalQuestionsView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
    
    @discord.ui.button(label="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", style=discord.ButtonStyle.primary)
    async def continue_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(AdditionalQuestionsModal())


class AdditionalQuestionsModal(discord.ui.Modal, title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
    grief = discord.ui.TextInput(
        label="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≥—Ä–∏—Ñ—É",
        placeholder="–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –≥—Ä–∏—Ñ—É?",
        style=discord.TextStyle.paragraph,
        required=True
    )
    
    source = discord.ui.TextInput(
        label="–ò—Å—Ç–æ—á–Ω–∏–∫",
        placeholder="–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ?",
        style=discord.TextStyle.paragraph,
        required=True
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        global active_tickets, TICKET_LOGS_CHANNEL_ID
        
        if interaction.user.id not in active_tickets:
            return await interaction.response.send_message("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        ticket_data = active_tickets[interaction.user.id]
        embed = ticket_data["embed"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        embed.add_field(name="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≥—Ä–∏—Ñ—É", value=self.grief.value, inline=False)
        embed.add_field(name="–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ", value=self.source.value, inline=False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
        logs_channel = interaction.guild.get_channel(int(TICKET_LOGS_CHANNEL_ID))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        view = TicketActionView(interaction.user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
        ticket_message = await logs_channel.send(embed=embed, view=view)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        active_tickets[interaction.user.id]["message_id"] = ticket_message.id
        
        await interaction.response.send_message("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)


# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class TicketActionView(discord.ui.View):
    def __init__(self, user_id):
        super().__init__(timeout=None)
        self.user_id = user_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ID
        accept_button = discord.ui.Button(
            label="–ü—Ä–∏–Ω—è—Ç—å", 
            style=discord.ButtonStyle.success, 
            custom_id=f"accept_ticket_{user_id}"
        )
        accept_button.callback = self.accept_ticket
        self.add_item(accept_button)
        
        reject_button = discord.ui.Button(
            label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
            style=discord.ButtonStyle.danger, 
            custom_id=f"reject_ticket_{user_id}"
        )
        reject_button.callback = self.reject_ticket
        self.add_item(reject_button)
    
    async def accept_ticket(self, interaction: discord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        
        global active_tickets, TICKET_ROLE_ID
        
        if self.user_id not in active_tickets:
            return await interaction.response.send_message("–ó–∞—è–≤–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = active_tickets[self.user_id]["user"]
        member = interaction.guild.get_member(user.id)
        
        if not member:
            return await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.", ephemeral=True)
        
        # –í—ã–¥–∞–µ–º —Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        if TICKET_ROLE_ID:
            try:
                role = interaction.guild.get_role(int(TICKET_ROLE_ID))
                if role:
                    await member.add_roles(role)
            except:
                await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", ephemeral=True)
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = active_tickets[self.user_id]["embed"]
        embed.color = discord.Color.green()
        embed.title = f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {user.display_name} (–ü–†–ò–ù–Ø–¢–ê)"
        embed.add_field(name="–ü—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", value=f"{interaction.user.mention} ({interaction.user.display_name})", inline=False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for child in self.children:
            child.disabled = True
        
        await interaction.message.edit(embed=embed, view=self)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
        try:
            dm_embed = discord.Embed(
                title="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
                description="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
                color=discord.Color.green()
            )
            await user.send(embed=dm_embed)
        except:
            pass
        
        await interaction.response.send_message(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –ø—Ä–∏–Ω—è—Ç–∞!", ephemeral=True)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del active_tickets[self.user_id]
    
    async def reject_ticket(self, interaction: discord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
        await interaction.response.send_modal(RejectReasonModal(self.user_id))


# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
class RejectReasonModal(discord.ui.Modal, title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞"):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = user_id
    
    reason = discord.ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞",
        style=discord.TextStyle.paragraph,
        required=True
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        global active_tickets
        
        if self.user_id not in active_tickets:
            return await interaction.response.send_message("–ó–∞—è–≤–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = active_tickets[self.user_id]["user"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = active_tickets[self.user_id]["embed"]
        embed.color = discord.Color.red()
        embed.title = f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç {user.display_name} (–û–¢–ö–õ–û–ù–ï–ù–ê)"
        embed.add_field(name="–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", value=f"{interaction.user.mention} ({interaction.user.display_name})", inline=False)
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=self.reason.value, inline=False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        view = TicketActionView(self.user_id)
        for child in view.children:
            child.disabled = True
        
        await interaction.message.edit(embed=embed, view=view)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–∞–∑–µ
        try:
            dm_embed = discord.Embed(
                title="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n\n**–ü—Ä–∏—á–∏–Ω–∞:** {self.reason.value}",
                color=discord.Color.red()
            )
            await user.send(embed=dm_embed)
        except:
            pass
        
        await interaction.response.send_message(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", ephemeral=True)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del active_tickets[self.user_id]


keep_alive.keep_alive()
bot.run(os.environ["Token"])

# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫, –ø–æ—Ö–æ–∂–µ, —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
# bot.run(os.getenv('1359162482215616742'))
