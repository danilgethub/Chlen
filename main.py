import os
import discord
import keep_alive
import re
import json
import datetime
from discord.ext import commands


intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.members = True
intents.presences = True


bot = commands.Bot(command_prefix='!', intents=intents)


created_channels = {}
ticket_history = []  # –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤

# ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å—Å—ã–ª–∫–∏
LINKS_FILTER_CHANNEL_ID = '1359604943228633399'  
# ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤
TICKETS_CHANNEL_ID = None  # –ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
TICKETS_LOG_CHANNEL_ID = None  # –ö–∞–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–∏–∫–µ—Ç—ã
ACCEPTED_ROLE_ID = None  # ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = 'config.json'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
def save_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
    config = {
        'links_filter_channel_id': LINKS_FILTER_CHANNEL_ID,
        'tickets_channel_id': TICKETS_CHANNEL_ID,
        'tickets_log_channel_id': TICKETS_LOG_CHANNEL_ID,
        'accepted_role_id': ACCEPTED_ROLE_ID
    }
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        print(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {CONFIG_FILE}')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}')

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    global LINKS_FILTER_CHANNEL_ID, TICKETS_CHANNEL_ID, TICKETS_LOG_CHANNEL_ID, ACCEPTED_ROLE_ID, ticket_history
    
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                
            LINKS_FILTER_CHANNEL_ID = config.get('links_filter_channel_id', LINKS_FILTER_CHANNEL_ID)
            TICKETS_CHANNEL_ID = config.get('tickets_channel_id', TICKETS_CHANNEL_ID)
            TICKETS_LOG_CHANNEL_ID = config.get('tickets_log_channel_id', TICKETS_LOG_CHANNEL_ID)
            ACCEPTED_ROLE_ID = config.get('accepted_role_id', ACCEPTED_ROLE_ID)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if 'ticket_history' in config:
                ticket_history = config['ticket_history']
            
            print(f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {CONFIG_FILE}')
        else:
            print(f'–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_config()

URL_PATTERN = re.compile(r'https?://\S+|www\.\S+')
DISCORD_INVITE_PATTERN = re.compile(r'discord(?:\.gg|app\.com/invite|\.com/invite)/\S+')

@bot.event
async def on_message(message):
    
    if message.author.bot or str(message.channel.id) != LINKS_FILTER_CHANNEL_ID:
        
        await bot.process_commands(message)
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    has_url = URL_PATTERN.search(message.content)
    has_discord_invite = DISCORD_INVITE_PATTERN.search(message.content)
    
    if has_url or has_discord_invite:
        
        await message.delete()
        await message.channel.send(
            f"{message.author.mention}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!",
            delete_after=5  
        )
    else:
        
        await bot.process_commands(message)

@bot.event
async def on_ready():
    """–°–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å Discord
    try:
        synced = await bot.tree.sync()
        print(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}')
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–Ω–∞–ª—ã
    if TICKETS_CHANNEL_ID:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
            tickets_channel = bot.get_channel(int(TICKETS_CHANNEL_ID))
            if tickets_channel:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                async for message in tickets_channel.history(limit=50):
                    if message.author == bot.user and message.components:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, –∑–Ω–∞—á–∏—Ç –∫–Ω–æ–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å
                        print(f'–ö–Ω–æ–ø–∫–∞ –∑–∞—è–≤–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ {tickets_channel.name}')
                        return
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                print(f'–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª–µ {tickets_channel.name}')
                embed = discord.Embed(
                    title="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
                    description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
                    color=discord.Color.green()
                )
                view = TicketView()
                await tickets_channel.send(embed=embed, view=view)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫: {e}')


@bot.event
async def on_voice_state_update(member, before, after):
    """–°–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
   
    TRIGGER_CHANNEL_ID = '1359605706289844445'  

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –∫–∞–Ω–∞–ª-—Ç—Ä–∏–≥–≥–µ—Ä
    if after.channel and str(after.channel.id) == TRIGGER_CHANNEL_ID:
        guild = member.guild

        
        channel = await guild.create_voice_channel(
            name=f'üîä {member.display_name}\'s –∫–∞–Ω–∞–ª',
            category=after.channel.category,
            overwrites={
                guild.default_role:
                discord.PermissionOverwrite(view_channel=False),
                member:
                discord.PermissionOverwrite(view_channel=True,
                                            connect=True,
                                            speak=True,
                                            stream=True,
                                            use_voice_activation=True,
                                            move_members=True,
                                            manage_channels=True)
            })

        
        await member.move_to(channel)

        
        created_channels[channel.id] = {'owner': member.id, 'channel': channel}

        
        view = PrivateChannelView(channel.id)

        
        message = await channel.send('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º:', view=view)

        
        created_channels[channel.id]['message_id'] = message.id

    
    if before.channel and before.channel.id in created_channels:
        channel_data = created_channels[before.channel.id]
        channel = channel_data['channel']

       
        if len(channel.members) == 0:
            await channel.delete()
            del created_channels[before.channel.id]


# –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –¢–ò–ö–ï–¢–û–í
class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @discord.ui.button(label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.primary, custom_id="create_ticket")
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(TicketModal())

class TicketModal(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"):
    nickname = discord.ui.TextInput(
        label="–ù–∏–∫",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft",
        required=True,
        max_length=32
    )
    
    age = discord.ui.TextInput(
        label="–í–æ–∑—Ä–∞—Å—Ç",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
        required=True,
        max_length=3
    )
    
    experience = discord.ui.TextInput(
        label="–ò–≥—Ä–∞–ª–∏ –ª–∏ –≤—ã –Ω–∞ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö?",
        placeholder="–î–∞/–ù–µ—Ç, —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
        required=True,
        style=discord.TextStyle.paragraph,
        max_length=200
    )
    
    adequacy = discord.ui.TextInput(
        label="–û—Ü–µ–Ω–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10",
        placeholder="–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10",
        required=True,
        max_length=2
    )
    
    plans = discord.ui.TextInput(
        label="–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        placeholder="–ß–µ–º –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ?",
        required=True,
        style=discord.TextStyle.paragraph,
        max_length=300
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if not hasattr(interaction.client, 'ticket_data'):
            interaction.client.ticket_data = {}
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—ã
        interaction.client.ticket_data[interaction.user.id] = {
            "nickname": self.nickname.value,
            "age": self.age.value,
            "experience": self.experience.value,
            "adequacy": self.adequacy.value,
            "plans": self.plans.value
        }
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        await interaction.response.send_modal(TicketModalPart2())

class TicketModalPart2(discord.ui.Modal, title="–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)"):
    griefing = discord.ui.TextInput(
        label="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≥—Ä–∏—Ñ—É",
        placeholder="–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –≥—Ä–∏—Ñ–µ—Ä—Å—Ç–≤—É?",
        required=True,
        style=discord.TextStyle.paragraph,
        max_length=200
    )
    
    source = discord.ui.TextInput(
        label="–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ",
        placeholder="–£–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ",
        required=True,
        style=discord.TextStyle.paragraph,
        max_length=200
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.send_message("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", ephemeral=True)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not hasattr(interaction.client, 'ticket_data') or interaction.user.id not in interaction.client.ticket_data:
            return await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—ã
        ticket_data = interaction.client.ticket_data[interaction.user.id]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ —Ç–∏–∫–µ—Ç–æ–≤
        tickets_log_channel = interaction.client.get_channel(int(TICKETS_LOG_CHANNEL_ID) if TICKETS_LOG_CHANNEL_ID else None)
        
        if not tickets_log_channel:
            return await interaction.followup.send("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", ephemeral=True)
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ —Ç–∏–∫–µ—Ç–∞
        embed = discord.Embed(
            title=f"–ó–∞—è–≤–∫–∞ –æ—Ç {interaction.user.display_name}",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {interaction.user.mention} (ID: {interaction.user.id})",
            color=discord.Color.blue()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
        embed.add_field(name="–ù–∏–∫", value=ticket_data["nickname"], inline=True)
        embed.add_field(name="–í–æ–∑—Ä–∞—Å—Ç", value=ticket_data["age"], inline=True)
        embed.add_field(name="–û–ø—ã—Ç –Ω–∞ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö", value=ticket_data["experience"], inline=False)
        embed.add_field(name="–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç–∏", value=ticket_data["adequacy"], inline=True)
        embed.add_field(name="–ü–ª–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", value=ticket_data["plans"], inline=False)
        embed.add_field(name="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≥—Ä–∏—Ñ—É", value=self.griefing.value, inline=False)
        embed.add_field(name="–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ —Å–µ—Ä–≤–µ—Ä–µ", value=self.source.value, inline=False)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        view = TicketResponseView(interaction.user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
        await tickets_log_channel.send(embed=embed, view=view)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del interaction.client.ticket_data[interaction.user.id]

class TicketResponseView(discord.ui.View):
    def __init__(self, user_id):
        super().__init__(timeout=None)
        self.user_id = user_id
        
    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, custom_id="accept_ticket")
    async def accept_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–æ–∫!", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞–µ–º —Ä–æ–ª—å
        guild = interaction.guild
        member = guild.get_member(self.user_id)
        
        if not member:
            return await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!", ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        role_id = ACCEPTED_ROLE_ID
        
        if role_id:
            role = guild.get_role(int(role_id))
            if role:
                try:
                    await member.add_roles(role)
                    await interaction.response.send_message(f"–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –†–æ–ª—å {role.name} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.display_name}.")
                except discord.Forbidden:
                    await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", ephemeral=True)
            else:
                await interaction.response.send_message("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ —Ä–æ–ª—å –Ω–µ –≤—ã–¥–∞–Ω–∞.", ephemeral=True)
        else:
            await interaction.response.send_message(f"–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.display_name} –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é.", ephemeral=False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        for child in self.children:
            child.disabled = True
        
        await interaction.message.edit(view=self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —ç–º–±–µ–¥–∞
        embed = interaction.message.embeds[0]
        nickname = ""
        age = ""
        for field in embed.fields:
            if field.name == "–ù–∏–∫":
                nickname = field.value
            elif field.name == "–í–æ–∑—Ä–∞—Å—Ç":
                age = field.value
        
        add_ticket_history(self.user_id, nickname, age, 'accepted', interaction.user.id)
        
        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await member.send(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        except:
            pass
    
    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="reject_ticket")
    async def reject_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫!", ephemeral=True)
        
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
        await interaction.response.send_message(f"–ó–∞—è–≤–∫–∞ –æ—Ç <@{self.user_id}> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        for child in self.children:
            child.disabled = True
        
        await interaction.message.edit(view=self)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —ç–º–±–µ–¥–∞
        embed = interaction.message.embeds[0]
        nickname = ""
        age = ""
        for field in embed.fields:
            if field.name == "–ù–∏–∫":
                nickname = field.value
            elif field.name == "–í–æ–∑—Ä–∞—Å—Ç":
                age = field.value
        
        add_ticket_history(self.user_id, nickname, age, 'rejected', interaction.user.id)
        
        # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        member = interaction.guild.get_member(self.user_id)
        if member:
            try:
                await member.send(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {interaction.guild.name} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            except:
                pass

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Ç–∏–∫–µ—Ç–∞
@bot.tree.command(name="setup_tickets", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
async def setup_tickets(interaction: discord.Interaction, tickets_channel: discord.TextChannel, logs_channel: discord.TextChannel, role: discord.Role = None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    
    global TICKETS_CHANNEL_ID, TICKETS_LOG_CHANNEL_ID, ACCEPTED_ROLE_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
    TICKETS_CHANNEL_ID = str(tickets_channel.id)
    TICKETS_LOG_CHANNEL_ID = str(logs_channel.id)
    if role:
        ACCEPTED_ROLE_ID = str(role.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    save_config()
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    embed = discord.Embed(
        title="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä",
        description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.",
        color=discord.Color.green()
    )
    
    view = TicketView()
    
    await tickets_channel.send(embed=embed, view=view)
    await interaction.response.send_message(f"–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n–ö–∞–Ω–∞–ª –∑–∞—è–≤–æ–∫: {tickets_channel.mention}\n–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {logs_channel.mention}\n–†–æ–ª—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö: {role.mention if role else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}", ephemeral=True)

# –ö–û–ù–ï–¶ –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –¢–ò–ö–ï–¢–û–í

class PrivateChannelView(discord.ui.View):

    def __init__(self, channel_id):
        super().__init__(timeout=None)
        self.channel_id = channel_id

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
        self.add_item(LockChannelButton())
        self.add_item(UnlockChannelButton())
        self.add_item(LimitButton())
        self.add_item(DeleteButton())
        self.add_item(RenameSelect())
        self.add_item(MemberActionSelect())



class LockChannelButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.secondary,
                         label='–ó–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª',
                         custom_id='lock_channel')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.set_permissions(interaction.guild.default_role,
                                      view_channel=True,
                                      connect=False)
        await interaction.response.send_message(
            '–ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç! –¢–µ–ø–µ—Ä—å –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –≤ –Ω–µ–≥–æ –≤–æ–π—Ç–∏.',
            ephemeral=True)


class UnlockChannelButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.success,
                         label='–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª',
                         custom_id='unlock_channel')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.set_permissions(interaction.guild.default_role,
                                      view_channel=True,
                                      connect=True)
        await interaction.response.send_message(
            '–ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç! –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏.', ephemeral=True)


class LimitButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.primary,
                         label='–õ–∏–º–∏—Ç',
                         custom_id='limit')

    async def callback(self, interaction: discord.Interaction):
        try:
            channel_id = self.view.channel_id

            if channel_id not in created_channels:
                return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                               ephemeral=True)

            channel_data = created_channels[channel_id]

            if interaction.user.id != channel_data['owner']:
                return await interaction.response.send_message(
                    '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
            modal = LimitModal(self.view.channel_id)
            await interaction.response.send_modal(modal)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")
            try:
                await interaction.response.send_message(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    ephemeral=True)
            except:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º followup
                await interaction.followup.send(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    ephemeral=True)


class DeleteButton(discord.ui.Button):

    def __init__(self):
        super().__init__(style=discord.ButtonStyle.danger,
                         label='–£–¥–∞–ª–∏—Ç—å',
                         custom_id='delete')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.delete()
        del created_channels[channel_id]


# –í—ã–ø–∞–¥–∞—é—â–∏–µ –º–µ–Ω—é
class RenameSelect(discord.ui.Select):

    def __init__(self):
        options = [
            discord.SelectOption(label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ',
                                 value='default',
                                 description='–í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
            discord.SelectOption(label='–ò–≥—Ä–æ–≤–æ–π',
                                 value='gaming',
                                 description='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä'),
            discord.SelectOption(label='–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π',
                                 value='music',
                                 description='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º—É–∑—ã–∫–∏'),
            discord.SelectOption(label='–°–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                 value='custom',
                                 description='–ó–∞–¥–∞—Ç—å —Å–≤–æ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª—É')
        ]
        super().__init__(placeholder='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                         min_values=1,
                         max_values=1,
                         options=options,
                         custom_id='rename')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        new_name_type = self.values[0]

        if new_name_type == 'custom':
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            modal = CustomNameModal(self.view.channel_id)
            await interaction.response.send_modal(modal)
        else:
            channel_name = ''
            if new_name_type == 'default':
                channel_name = f'üîä {interaction.user.display_name}\'s –∫–∞–Ω–∞–ª'
            elif new_name_type == 'gaming':
                channel_name = f'üéÆ {interaction.user.display_name}\'s –∏–≥—Ä–æ–≤–æ–π'
            elif new_name_type == 'music':
                channel_name = f'üéµ {interaction.user.display_name}\'s –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π'

            await channel.edit(name=channel_name)
            await interaction.response.send_message(
                f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{channel_name}"!',
                ephemeral=True)


class MemberActionSelect(discord.ui.Select):

    def __init__(self):
        options = [
            discord.SelectOption(label='–ö–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞',
                                 value='kick',
                                 description='–í—ã–≥–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞'),
            discord.SelectOption(label='–ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞',
                                 value='ban',
                                 description='–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–≥—Ä–æ–∫—É –≤—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª')
        ]
        super().__init__(placeholder='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
                         min_values=1,
                         max_values=1,
                         options=options,
                         custom_id='member_action')

    async def callback(self, interaction: discord.Interaction):
        channel_id = self.view.channel_id

        if channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        action = self.values[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ (–∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
        members = [m for m in channel.members if m.id != channel_data['owner']]

        if not members:
            return await interaction.response.send_message(
                '–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!', ephemeral=True)

        # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        view = discord.ui.View()
        select = MemberSelect(members, action, channel_id)
        view.add_item(select)

        await interaction.response.send_message(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è ' +
            ('–∫–∏–∫–∞:' if action == 'kick' else '–±–∞–Ω–∞:'),
            view=view,
            ephemeral=True)


class MemberSelect(discord.ui.Select):

    def __init__(self, members, action, channel_id):
        self.action = action
        self.channel_id = channel_id

        options = []
        for member in members:
            options.append(
                discord.SelectOption(label=member.display_name,
                                     value=f"{action}_{member.id}",
                                     description=str(member)))

        super().__init__(placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
                         min_values=1,
                         max_values=1,
                         options=options,
                         custom_id='member_select')

    async def callback(self, interaction: discord.Interaction):
        if self.channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[self.channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        action, user_id = self.values[0].split('_')
        member = interaction.guild.get_member(int(user_id))

        if not member:
            return await interaction.response.send_message(
                '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!', ephemeral=True)

        if action == 'kick':
            if member.voice and member.voice.channel and member.voice.channel.id == channel.id:
                await member.move_to(None)
            await interaction.response.send_message(
                f'{member.display_name} –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞!', ephemeral=True)
        elif action == 'ban':
            await channel.set_permissions(member,
                                          view_channel=False,
                                          connect=False)
            if member.voice and member.voice.channel and member.voice.channel.id == channel.id:
                await member.move_to(None)
            await interaction.response.send_message(
                f'{member.display_name} –∑–∞–±–∞–Ω–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ!', ephemeral=True)


# –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
class CustomNameModal(discord.ui.Modal, title='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞'):

    def __init__(self, channel_id):
        super().__init__()
        self.channel_id = channel_id

    channel_name = discord.ui.TextInput(
        label='–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
        placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞',
        min_length=1,
        max_length=30,
        required=True)

    async def on_submit(self, interaction: discord.Interaction):
        if self.channel_id not in created_channels:
            return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                           ephemeral=True)

        channel_data = created_channels[self.channel_id]

        if interaction.user.id != channel_data['owner']:
            return await interaction.response.send_message(
                '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

        channel = channel_data['channel']
        await channel.edit(name=self.channel_name.value)
        await interaction.response.send_message(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{self.channel_name.value}"!',
            ephemeral=True)


class LimitModal(discord.ui.Modal, title='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'):

    def __init__(self, channel_id):
        super().__init__()
        self.channel_id = channel_id

    limit = discord.ui.TextInput(label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                                 placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99',
                                 min_length=1,
                                 max_length=2,
                                 required=True)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            if self.channel_id not in created_channels:
                return await interaction.response.send_message('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!',
                                                               ephemeral=True)

            channel_data = created_channels[self.channel_id]

            if interaction.user.id != channel_data['owner']:
                return await interaction.response.send_message(
                    '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º!', ephemeral=True)

            channel = channel_data['channel']

            try:
                limit = int(self.limit.value)
                if limit < 1 or limit > 99:
                    return await interaction.response.send_message(
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99!', ephemeral=True)

                await channel.edit(user_limit=limit)
                await interaction.response.send_message(
                    f'–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}', ephemeral=True)
            except ValueError:
                await interaction.response.send_message(
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99!', ephemeral=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞: {e}")
            await interaction.response.send_message(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                ephemeral=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–æ–≤
def add_ticket_history(user_id, nickname, age, decision, decider_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–∏–∫–µ—Ç–æ–≤"""
    ticket_record = {
        'user_id': user_id,
        'nickname': nickname,
        'age': age,
        'decision': decision,  # 'accepted' –∏–ª–∏ 'rejected'
        'decider_id': decider_id,
        'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    ticket_history.append(ticket_record)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    config = {}
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
        
        config['ticket_history'] = ticket_history
        
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {e}')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
@bot.tree.command(name="tickets_history", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
async def tickets_history(interaction: discord.Interaction, status: str = None):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    status: –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (all, accepted, rejected)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if status and status.lower() not in ['all', 'accepted', 'rejected']:
        return await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ all, accepted –∏–ª–∏ rejected.", ephemeral=True)
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    if not status:
        status = 'all'
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É
    filtered_history = []
    if status.lower() == 'all':
        filtered_history = ticket_history
    elif status.lower() == 'accepted':
        filtered_history = [ticket for ticket in ticket_history if ticket['decision'] == 'accepted']
    elif status.lower() == 'rejected':
        filtered_history = [ticket for ticket in ticket_history if ticket['decision'] == 'rejected']
    
    # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
    if not filtered_history:
        return await interaction.response.send_message(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ ({status}) –ø—É—Å—Ç–∞.", ephemeral=True)
    
    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    embed = discord.Embed(
        title=f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ ({status})",
        description=f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(filtered_history)}",
        color=discord.Color.blue()
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    for i, ticket in enumerate(filtered_history[-10:]):
        user_id = ticket['user_id']
        nickname = ticket['nickname']
        age = ticket['age']
        decision = "–ü—Ä–∏–Ω—è—Ç–∞" if ticket['decision'] == 'accepted' else "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        decider_id = ticket['decider_id']
        timestamp = ticket['timestamp']
        
        embed.add_field(
            name=f"{i+1}. {nickname} ({age} –ª–µ—Ç)",
            value=f"–°—Ç–∞—Ç—É—Å: {decision}\n–ö–µ–º: <@{decider_id}>\n–ö–æ–≥–¥–∞: {timestamp}",
            inline=False
        )
    
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if len(filtered_history) > 10:
        embed.set_footer(text=f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑ {len(filtered_history)} –∑–∞–ø–∏—Å–µ–π")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

keep_alive.keep_alive()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
bot.run("MTM1OTE1MzEyMjI3ODI0ODY0NA.GiMsry.Zt9_Rw7qQ8W0PvwXuNoizRiiNR0duJhS3Be8Yw")
